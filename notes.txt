Q. Introduce yourself?
A. "My name is Salar Ahmed, and I hold a bachelor's degree in Computer Science. 
    Currently, I am working as a Software Engineer at OkLabs, where I have 
    gained over five years of experience in both frontend and backend 
    development. I am now transitioning into data science, actively expanding 
    my skills in machine learning, data analytics, and statistical modeling.

Q. What is c++?
A. "C++ is a high-performance, general-purpose programming language that 
    supports both procedural and object-oriented programming paradigms. It is 
    widely used for system programming, game development, competitive 
    programming, and applications requiring high efficiency, such as embedded 
    systems and real-time applications."

Q. Why c++?
A. "C++ is chosen for its high performance, efficiency, and flexibility. It 
    provides low-level memory control, making it ideal for system programming, 
    game development, and real-time applications. Its support for both 
    object-oriented and procedural programming allows developers to write 
    scalable and maintainable code. Additionally, C++ has a vast standard 
    library and is widely used in industries requiring speed and resource 
    optimization."

Q. How to execute cpp file?
A. " g++ -o output_name your_file.cpp ".

Q. What is array?
A. "An array is a data structure that stores multiple elements of the same type 
    in a contiguous memory location. It allows efficient access to elements 
    using an index and is widely used for storing and manipulating collections 
    of data in programming."

Q. Why array?
A. "Arrays are used because they provide efficient storage and retrieval of 
    data. They allow constant-time access (O(1)) to elements using an index, 
    making them ideal for scenarios where quick lookups and ordered data 
    storage are required. Arrays also help in optimizing memory usage since 
    they store elements in a contiguous memory block."

1. Find the Largest Element in an Array
i/p -> {1,2,3,4,5}
o/p -> 5

Explanation:-
1. initialize ans = 0
2. iterate this over the array and check if it is lesser if yes then update it.

2. Find the Second Largest Element
i/p -> {1,2,3,4,5}
o/p -> 4

Explanation:-
1. initialize ans = 0, second_ans = 0
2. iterate this over the array and check if it is lesser if yes then update it.
3. iterate this over the array and check if it ans = arr[i] then continue
    in the else part check if the second_ans is lesser if yes then update the
    ans.

3. Reverse an Array
i/p -> {1,2,3,4,5}
o/p -> {5,4,3,2,1}

Explanation:-
1. iterate the array and just swap the value 1 to the end.

4. Check if an Array is Sorted
i/p -> {1,2,3,4,5}
o/p -> yes. the array is sorted.

Explanation:-

if arr[i] < arr[i-1] agar ha
    "No array is not sorted."
else
    "No array is not sorted."

5. swap alternate.
i/p -> {1,2,3,4,5}
o/p -> {2,1,4,3,5}

Explanation:-

1st iteration:
arr[0] = arr[1] and arr[1] = arr[0]

2nd iteration:
arr[2] = arr[3] and arr[3] = arr[2]

iterate over the array where we swap elements and then increament i by 2.

6. unique number.
i/p -> {2,3,4,3,4,2,1}
o/p -> {1}

Explanation:-
initialize ans = arr[0]
iterate over an array check if this value is not exist then its unique.

7. unique no of occurence.
i/p -> {1,2,2,1,1,3}
o/p -> true because their occurence is unique:
                                                1 -> 3
                                                2 -> 2
                                                3 -> 1

Explanation:-
initialize ans = arr[0]
iterate over the array check how many time this value is available
if not available then it's occurence is one. and so on...